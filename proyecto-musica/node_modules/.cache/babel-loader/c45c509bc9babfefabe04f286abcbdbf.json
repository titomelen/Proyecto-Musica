{"ast":null,"code":"var _jsxFileName = \"G:\\\\Desarrollo WEB Cliente\\\\ProyectoMusica\\\\proyecto-musica\\\\src\\\\modulos\\\\tracks\\\\TrackList.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Container } from 'reactstrap';\nimport SearchTracks from './SearchTracks';\nimport TrackItem from './TrackItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tracks: []\n    };\n\n    this.search = () => {\n      const {\n        search: query\n      } = this.props.location;\n      fetch(`https://itunes.apple.com/search${query}`, {\n        mode: 'cors'\n      }).then(res => res.json()).then(({\n        results\n      }) => this.setState({\n        tracks: results\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.search !== prevProps.location.search) {\n      this.search();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SearchTracks, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: this.state.tracks.map(track => /*#__PURE__*/_jsxDEV(TrackItem, {\n          track: track\n        }, track.trackId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["G:/Desarrollo WEB Cliente/ProyectoMusica/proyecto-musica/src/modulos/tracks/TrackList.js"],"names":["React","Component","Fragment","Container","SearchTracks","TrackItem","state","tracks","search","query","props","location","fetch","mode","then","res","json","results","setState","componentDidMount","componentDidUpdate","prevProps","render","map","track","trackId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,YAA1B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,eAAe,cAAcJ,SAAd,CAAwB;AAAA;AAAA;AAAA,SACrCK,KADqC,GAC7B;AACNC,MAAAA,MAAM,EAAE;AADF,KAD6B;;AAAA,SAerCC,MAfqC,GAe5B,MAAM;AACb,YAAM;AAAEA,QAAAA,MAAM,EAAEC;AAAV,UAAoB,KAAKC,KAAL,CAAWC,QAArC;AAEAC,MAAAA,KAAK,CAAE,kCAAiCH,KAAM,EAAzC,EAA4C;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAA5C,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQ,CAAC;AAAEG,QAAAA;AAAF,OAAD,KAAiB,KAAKC,QAAL,CAAc;AAAEX,QAAAA,MAAM,EAAEU;AAAV,OAAd,CAFzB;AAGD,KArBoC;AAAA;;AAKrCE,EAAAA,iBAAiB,GAAG;AAClB,SAAKX,MAAL;AACD;;AAEDY,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKX,KAAL,CAAWC,QAAX,CAAoBH,MAApB,KAA+Ba,SAAS,CAACV,QAAV,CAAmBH,MAAtD,EAA8D;AAC5D,WAAKA,MAAL;AACD;AACF;;AAUDc,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,QAAD;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA,kBACG,KAAKhB,KAAL,CAAWC,MAAX,CAAkBgB,GAAlB,CAAsBC,KAAK,iBAC1B,QAAC,SAAD;AAA+B,UAAA,KAAK,EAAEA;AAAtC,WAAgBA,KAAK,CAACC,OAAtB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAlCoC","sourcesContent":["import React, { Component, Fragment } from 'react'\nimport { Container } from 'reactstrap'\n\nimport SearchTracks from './SearchTracks'\nimport TrackItem from './TrackItem'\n\nexport default class extends Component {\n  state = {\n    tracks: []\n  }\n\n  componentDidMount() {\n    this.search()\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.location.search !== prevProps.location.search) {\n      this.search()\n    }\n  }\n\n  search = () => {\n    const { search: query } = this.props.location\n\n    fetch(`https://itunes.apple.com/search${query}`, { mode: 'cors' })\n      .then(res => res.json())\n      .then(({ results }) => this.setState({ tracks: results }))\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <SearchTracks />\n        <Container>\n          {this.state.tracks.map(track => (\n            <TrackItem key={track.trackId} track={track} />\n          ))}\n        </Container>\n      </Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}